controller:
#  type: deployment
  volumes:
    extra:
      - name: host
        hostPath:
          path: /
      - name: sys
        hostPath:
          path: /sys
mounts:
  extra:
    - mountPath: /host
      name: host
      readOnly: true
    - mountPath: /sys
      name: sys
      readOnly: true
alloy:
  securityContext:
    privileged: true
  stabilityLevel: public-preview
#  stabilityLevel: experimental
  extraPorts:
    - name: "grpc"
      port: 4317
      targetPort: 4317
    - name: "http"
      port: 4318
      targetPort: 4318
    - name: "zipkin"
      port: 9411
      targetPort: 9411
  configMap:
    content: |
      otelcol.exporter.otlp "causely" {
        client {
          endpoint = "mediator.causely:4317"
          tls {
            insecure = true
          }
        }
      }

      otelcol.exporter.otlp "tempo" {
        client {
          endpoint = "tempo:4317"
          tls {
            insecure = true
          }
        }
      }

      // otelcol.exporter.debug "traces" {
      //   verbosity           = "detailed"
      //   sampling_initial    = 1
      //   sampling_thereafter = 1
      // }

      otelcol.exporter.otlphttp "grafana" {
        client {
          endpoint = "https://otlp-gateway-prod-us-east-0.grafana.net/otlp"
          auth     = otelcol.auth.basic.grafana.handler
        }
      }

      otelcol.auth.basic "grafana" {
        username = "GRAFANA_CLOUD_INSTANCE_ID"
        password = "GRAFANA_CLOUD_API_KEY"
      }

      otelcol.exporter.otlp "dash0" {
        client {
          endpoint = "ingress.eu-west-1.aws.dash0.com:4317"
          auth     = otelcol.auth.bearer.dash0.handler
          tls {
            insecure_skip_verify = true
          }
        }
      }

      otelcol.auth.bearer "dash0" {
        token = "auth_token"
      }

      otelcol.exporter.otlphttp "dynatrace" {
        client {
          endpoint = "https://XXX.live.dynatrace.com/api/v2/otlp"
          auth     = otelcol.auth.headers.dynatrace.handler
        }
      }

      otelcol.auth.headers "dynatrace" {
        header {
          key   = "Authorization"
          value = "Api-Token dt0c01.1234567890abcdef"
        }
      }
      
      // otelcol.exporter.zipkin "lightstep" {
      //   client {
      //     endpoint = "lightstepint.internal.com:443"
      //   }
      // }

      // discovery.kubernetes allows you to find scrape targets from Kubernetes resources.
      // It watches cluster state and ensures targets are continually synced with what is currently running in your cluster.
      discovery.kubernetes "pod_logs" {
        role = "pod"
      }

      // discovery.relabel rewrites the label set of the input targets by applying one or more relabeling rules.
      // If no rules are defined, then the input targets are exported as-is.
      discovery.relabel "pod_logs" {
        targets = discovery.kubernetes.pod_logs.targets

        // Label creation - "namespace" field from "__meta_kubernetes_namespace"
        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          action = "replace"
          target_label = "namespace"
        }

        // Label creation - "pod" field from "__meta_kubernetes_pod_name"
        rule {
          source_labels = ["__meta_kubernetes_pod_name"]
          action = "replace"
          target_label = "pod"
        }

        // Label creation - "container" field from "__meta_kubernetes_pod_container_name"
        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          action = "replace"
          target_label = "container"
        }

        // Label creation -  "app" field from "__meta_kubernetes_pod_label_app_kubernetes_io_name"
        rule {
          source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
          action = "replace"
          target_label = "app"
        }

        // Label creation -  "job" field from "__meta_kubernetes_namespace" and "__meta_kubernetes_pod_container_name"
        // Concatenate values __meta_kubernetes_namespace/__meta_kubernetes_pod_container_name
        rule {
          source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
          action = "replace"
          target_label = "job"
          separator = "/"
          replacement = "$1"
        }

        // Label creation - "container" field from "__meta_kubernetes_pod_uid" and "__meta_kubernetes_pod_container_name"
        // Concatenate values __meta_kubernetes_pod_uid/__meta_kubernetes_pod_container_name.log
        rule {
          source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
          action = "replace"
          target_label = "__path__"
          separator = "/"
          replacement = "/var/log/pods/*$1/*.log"
        }

        // Label creation -  "container_runtime" field from "__meta_kubernetes_pod_container_id"
        rule {
          source_labels = ["__meta_kubernetes_pod_container_id"]
          action = "replace"
          target_label = "container_runtime"
          regex = "^(\\S+):\\/\\/.+$"
          replacement = "$1"
        }
      }

      loki.write "default" {
        endpoint {
          url = "http://loki:3100/loki/api/v1/push"
        }
      }

      // loki.source.kubernetes tails logs from Kubernetes containers using the Kubernetes API.
      loki.source.kubernetes "pod_logs" {
        targets    = discovery.relabel.pod_logs.output
        forward_to = [loki.process.pod_logs.receiver]
      }

      // loki.process receives log entries from other Loki components, applies one or more processing stages,
      // and forwards the results to the list of receivers in the component's arguments.
      loki.process "pod_logs" {
        stage.static_labels {
          values = {
            cluster = "<CLUSTER_NAME>",
          }
        }
        forward_to = [loki.write.default.receiver]
        // forward_to = [otelcol.write.loki.receiver]
      }

      otelcol.receiver.loki "default" {
        output {
          logs = [otelcol.processor.batch.default.input]
        }
      }

      otelcol.exporter.loki "default" {
        forward_to = [loki.write.default.receiver]
      }

      prometheus.remote_write "default" {
        endpoint {
          url = "http://kube-prometheus-stack-prometheus:9090/api/v1/write"
        }
      }

      beyla.ebpf "default" {
        open_port = "80,443,3000,8000-8999"
        // discovery {
        //   exclude_otel_instrumented_services = false
        //   services {}
        // }
        // debug = true
        attributes {
          kubernetes {
            enable = "true"
          }
          select "traces" {
            exclude = []
            include = ["db.query.text"]
          }
        }
        output {
          traces = [otelcol.processor.batch.default.input]
        }
      }

      otelcol.exporter.prometheus "default" {
        forward_to = [prometheus.remote_write.default.receiver]
      }
      
      otelcol.processor.batch "default" {
        output {
          logs = [otelcol.exporter.loki.default.input]
          // logs = [otelcol.exporter.otlphttp.grafana.input]
          metrics = [otelcol.exporter.prometheus.default.input, otelcol.exporter.otlp.causely.input]
          // metrics = [otelcol.exporter.otlphttp.grafana.input, otelcol.exporter.otlp.causely.input]
          // metrics = [otelcol.exporter.otlp.dash0.input,  otelcol.exporter.otlp.causely.input]
          traces = [otelcol.exporter.otlp.tempo.input, otelcol.exporter.otlp.causely.input]
          // traces  = [otelcol.exporter.otlphttp.grafana.input, otelcol.exporter.otlp.causely.input]
          // traces = [otelcol.exporter.otlp.dash0.input, otelcol.exporter.otlp.causely.input]
          // traces = [otelcol.exporter.otlphttp.dynatrace.input, otelcol.exporter.otlp.causely.input]
          // traces = [otelcol.exporter.zipkin.lightstep.input, otelcol.exporter.otlp.causely.input]
        }
      }

      otelcol.processor.k8sattributes "default" {
        extract {
          label {
            from = "pod"
          }

          metadata = [
            "k8s.namespace.name",
            "k8s.pod.name",
            "k8s.pod.uid",
            "k8s.deployment.name",
            "k8s.node.name",
            "k8s.pod.start_time",
          ]
        }

        output {
          traces = [otelcol.processor.batch.default.input]
        }
      }

      otelcol.receiver.otlp "otlp" {
        grpc {
          endpoint = "0.0.0.0:4317"
        }
        http {
          endpoint = "0.0.0.0:4318"
        }

        output {
          logs    = [otelcol.processor.batch.default.input]
          metrics = [otelcol.processor.batch.default.input]
          traces  = [otelcol.processor.k8sattributes.default.input]
        }
      }

      // otelcol.receiver.zipkin "zipkin" {
      //   protocols {
      //     zipkin {
      //       endpoint = "0.0.0.0:9411"
      //     }
      //   }

      //   output {
      //       metrics = [otelcol.processor.batch.default.input]
      //       traces  = [otelcol.processor.k8sattributes.default.input]
      //   }
      // }
